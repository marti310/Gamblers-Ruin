######################################################################
## GGR1dMirror.txt: Save this file as  GGR1dMirror.txt to use it,                #
# stay in the                                                        #
## same directory, get into Maple (by typing: maple <Enter> )        #
#then type: read `GGR1d.txt`: <Enter>                                #
## Then follow the instructions given there                          #
##                                                                   #
## Written by  Lucy Martinez Rutgers University			     #
######################################################################

#VERSION OF November 08, 2024

with(Statistics):



print(`First Written: May 2024: tested for Maple 20 `):
print():
print(`This is GGR1dMirror.txt, a Maple package `):
print(`accompanying Lucy Martinez's  article: `):
print(`A symbolic computational approach to the generalized gambler's ruin problem in one and two dimensions`):

print(`-------------------------------`):

print(`-------------------------------`):
print():
print(`The most current version is available at the url:`):
print(` https:// `):

print(`Please report all bugs to: lm1154@scarletmail.rutgers.edu  .`):
print():
print(`-------------------------------`):
print(`For general help, and a list of the MAIN functions,`):
print(` type "Help();". For specific help type "Help(procedure_name);" `):

print(`-------------------------------`):
print(`For a list of the simulation functions type:  HelpSimu();`):


print(`For help with a specific procedure, type "Help(procedure_name);"`):
print():
print(`-------------------------------`):




HelpSimu:=proc()
if args=NULL then

print(` The procedures for simulation are: Simu1, Simu, SimuMirror1, SimuMirror`):

else
 Help(args):
fi:
end:



Help:=proc()

if args=NULL then

print(`GGR1dMirror.txt: A Maple package for  general Gambler's Ruin `):
print(`The main procedures are: IsP, MyPT, RMS, ProbN, ExpN, ProbN2, ExpN2`):
print(`CheckProbN2, CheckExp2, GR1g, GRg, GPn1, GPn, IdentRat, CFtoN`):
print(`Lk, AkOld, Ak`):



elif nargs=1 and args[1]=IsP then
print(`IsP(P): Inputs a table P=[[a1,p1],[a2,p2],...,[ar,pr]] where p1+p2+...+pr=1,`):
print(`and checks that the ai's are strictly increasing, all probabilities add up to 1,`):
print(`and that there exists at least one negative ai and one positive aj, outputs`):
print(`true or false`):


elif nargs=1 and args[1]=MyPT then
print(`MyPT(P): Inputs P=[[a1,p1],[a2,p2],...,[ar,pr]] where p1+p2+...+pr=1, and uses the Maple Sample function`):
print(`to output ai with probability pi. Try:`):
print(`MyPT([[-1,1/2],[1,1/2]]); `):

elif nargs=1 and args[1]=RMS then
print(`RMS(N,x,p): Inputs integers N and x where 0<x<N, and a probability p, 0<p<1,`):
print(`and uses the Maple Sample function to output x-1 with probability (1-p)/2,`):
print(`x+1 with probability (1-p)/2, or N-x with probability p. Try:`):
print(`RMS(10,3,1/3); `):

elif nargs=1 and args[1]=ProbN then
print(`ProbN(N): Inputs a positive integer N and outputs a list L of length N such that`):
print(`L[x] is the probability of winning in the casino`):
print(`when you start at location x, with probability 1/2 you go to x-1 and`):
print(`with probability 1/2 you go to N-x. Try:`):
print(`ProbN(5); `):

elif nargs=1 and args[1]=ExpN then 
print(`ExpN(N): Inputs a positive integer N and outputs a list L of length N-1 such that`):
print(`L[x] is the expected duration in the casino until exiting (either a loser or winner)`):
print(`when you start at location x, with probability 1/2 you go to x-1 and`):
print(`with probability 1/2 you go to N-x. Try:`):
print(`ExpN(5); `):

elif nargs=1 and args[1]=Simu1 then
print(`Simu1(x,N): Inputs integers x and N such that 0<=x<=N+1 where x is the location on`):
print(`the discrete line of [0,N+1] where with probability 1/2 you go to x-1 and`):
print(`with probability 1/2 you go to N-x, and outputs a list of length two where the first element`):
print(`is 0 (loser) or 1 (winner), followed by the number of times it takes to exit the game. Try:`):
print(`Simu1(3,5); `):

elif nargs=1 and args[1]=Simu then
print(`Simu(x,N,K): Inputs integers x,N,K, runs Simu1(x,N) "K" times, and outputs`):
print(`the ratio of times where it exited a winner followed by the expected duration. Try:`):
print(`Simu(3,5,1000); `):


elif nargs=1 and args[1]=SimuMirror1 then
print(`SimuMirror1(p,x,N): inputs a prob. p, a location x from 1 to N-1`):
print(`and the length of the interval N, and runs it one time starting at x `):
print(`and going to N-x with prob. p, and (1-p)/2 each to x-1 and x+1. Try:`):
print(`SimuMirror1(1/3,3,5); `):


elif nargs=1 and args[1]=SimuMirror then
print(`SimuMirror(p,x,N,K): Inputs a probability 0<p<1, and integers x,N,K,`):
print(`runs SimuMirror1(p,x,N) "K" times, and outputs the ratio of times`):
print(`where it exited a winner followed by the expected duration. Try:`):
print(`SimuMirror(1/3,3,5,1000); `):

 
elif nargs=1 and args[1]=ProbN2 then
print(`ProbN2(N,P): Inputs a positive integer N and a probability table P such that`):
print(`P=[p1,p2,p3] where p1+p2+p3=1 and outputs a list L of length N such that`):
print(`L[x] is the probability of winning in the casino when you start at location x,`):
print(`with probability p1 you go to x-1, with probability p2 you to x+1`):
print(`and with probability p3 you go to N-x. Try:`):
print(`ProbN2(5,[1/3,1/3,1/3]); `):


elif nargs=1 and args[1]=ExpN2 then
print(`ExpN2(N,P): Inputs a positive integer N and a probability table P where`):
print(`P=[p1,p2,p3] and p1+p2+p3=1, and outputs a list L of length N such that`):
print(`L[x] is the expected duration in the casino until exiting (either a loser or winner) location x,`):
print(`when you start at location x, with probability p1 you go to x-1,`):
print(`with probability p2 you to x+1, and with probability p3 you go to N-x. Try:`):
print(`ExpN2(5,[1/3,1/3,1/3]); `):


elif nargs=1 and args[1]=CheckProbN2 then
print(`CheckProbN2(p,x,N): Inputs a positive integer N, an integer x such that 0<x<N`):
print(`and a probability p where 0<=p<=1, checks the conjectured formulas for the limit`):
print(`for the probability of starting at x and ending a winner for when`):
print(`with probability (1-p)/2 you to x-1, with probability (1-p)/2 you go to x+1,`):
print(`and with probability p you go to N-x. Try:`):
print(`CheckProbN2(1,1/3,90); `):


elif nargs=1 and args[1]=CheckExp2 then
print(`CheckExp2(p,x,N): Inputs a positive integer N, an integer x such that 0<x<N,`):
print(`and a probability p with 0<=p<1, and checks the conjectured formula of `):
print(`for the expected duration of starting at x, with probability (1-p)/2 you to x-1,`):
print(`with probability (1-p)/2 you to x+1, and with probability p you go to N-x. Try: `):
print(`CheckExp2(2,1/2,10); `):



elif nargs=1 and args[1]=GR1g then
print(`GR1g(L,n,d): Inputs a list of lists of numbers, and tries to guess a`):
print(`rational equation for the list of lists of numbers of degree d in terms of n. Try:`):


elif nargs=1 and args[1]=GRg then
print(`GRg(L,n): Inputs a list of lists of numbers, and runs GR1g(L,n,d)`):
print(`which tries to find a rational equation for the list of lists of numbers in terms of n. Try:`):


elif nargs=1 and args[1]=GP1n then
print(`GP1n(L,n,d): Inputs a list of pairs [input,output], a variable n, and a non-neg. d`):
print(`outputs the polynomial of degree d, P(n), such that P(i)=L[i], for all i from 1 to nops(L). Or FAIL`):
print(`when nops(L)>=d+2.`):


elif nargs=1 and args[1]=GPn then
print(`GPn(L,n): Inputs a list of numbers L, and a variable n, and outputs the polynomial of degree <=nops(L)-2`):
print(`P(n), such that P(i)=L[i], for all i from 1 to nops(L). Or FAIL when nops(L)>=d+2.`):


elif nargs=1 and args[1]=IdentRat then
print(`IdentRat(x): Inputs a number in decimals believed to be rational and guesses it. Try:`):
print(`IdentRat(3/5+10^(-10)); `):


elif nargs=1 and args[1]=CFtoN then
print(`CFtoN(L): Inputs a list of the continued fraction of a rational number and outputs the rational number. Try:`):
print(`CFtoN([0, 11]); `):


elif nargs=1 and args[1]=Lk then
print(`Lk(p,x,N): Inputs a probability p, 0<p<1, and integers x and N such that`):
print(`0<x<N, and outputs the exact probability of ending at N when you start`):
print(`at location x where with probability (1-p)/2 you go to x-1, with probability`):
print(`(1-p)/2 you go to x+1 and with probability p you go to N-x. Try:`):
print(`Lk(1/3,4,100); `):


elif nargs=1 and args[1]=AkOld then
print(`AkOld(p,x): The old version of Ak(p,x).`):
print(`Inputs a probability p, 0<p<1, and an integer x, and outputs`):
print(`the conjectured probability limit of ending at N when you start at location x`):
print(`as N goes to infinity where with probability (1-p)/2 you go to x-1,`):
print(`with probability (1-p)/2 you go to x+1 and with probability p you go to N-x. Try:`):
print(`AkOld(1/3,4); `): 


elif nargs=1 and args[1]=Ak then
print(`Ak(p,x): The simplified form of AkOld(p,x). Try:`):
print(`Ak(1/3,4); `):



else
 print(`There is no such thing as`, args):
fi:

end:




########################
#IsP(P): Inputs a table P=[[a1,p1],[a2,p2],...,[ar,pr]] where p1+p2+...+pr=1,
# and checks that the ai's are strictly increasing, all probabilities add up to 1,
# and that there exists at least one negative ai and one positive aj, outputs
# true or false
IsP:=proc(P) local P1,P2,n,i,j:
n:=nops(P):
P1:=[]:
P2:=[]:
for i from 1 to n do
 P1:=[op(P1),P[i,1]]:
 P2:=[op(P2),P[i,2]]:
od:

for i from 1 to n-1 do
 if not (P1[i]<P1[i+1]) then
  print(`The list of lists is not in ascending order (first entry)`):
  return false:
 fi:
od:

for i in P1 do
 if not (type(min(P1),negint) and type(max(P1),posint)) then
  print(`The lists of lists does not have a negative and positive integer (first entry)`):
  return false:
 fi:
od:
end:


#MyPT(P): Inputs P=[[a1,p1],[a2,p2],...,[ar,pr]] where p1+p2+...+pr=1, and uses the Maple Sample function
# to output ai with probability pi
MyPT:=proc(P) local n,newP,i,X,j,k:
n:=nops(P):
newP:=[]:
for i from 1 to n do
 newP:=[op(newP),P[i,2]]:
od:

if add(j, j in newP)=1 then
 X:=RandomVariable(ProbabilityTable(newP)):
 k:=convert(Sample(X,1)[1],integer):
else
 print(`Sum of all the probabilities (elements in the second entry of the given list) should add up to 1`):
fi:
P[k,1]:
end:


########################
#ProbN(N): Inputs a positive integer N and outputs a list L of length N such that
# L[x] is the probability of winning in the casino
# when you start at location x, with probability 1/2 you go to x-1 and
# with probability 1/2 you go to N-x
ProbN:=proc(N) local p,eq,i,var:
var:={seq(p[i],i=0..N+1)}:
eq:={p[0]=0,p[N+1]=1}:

for i from 1 to N do
 eq:=eq union {p[i]=1/2*p[i-1]+1/2*p[N-i]}:
od:
var:=solve(eq,var):
subs(var,[seq(p[i],i=1..N)]):
end:



# ExpN(N): Inputs a positive integer N and outputs a list L of length N such that
# L[x] is the expected duration in the casino until exiting (either a loser or winner)
# when you start at location x, with probability 1/2 you go to x-1 and
# with probability 1/2 you go to N-x
ExpN:=proc(N) local p,eq,i,var:
var:={seq(p[i],i=0..N+1)}:
eq:={p[0]=0,p[N+1]=0}:

for i from 1 to N do
 eq:=eq union {p[i]=1/2*p[i-1]+1/2*p[N-i]+1}:
od:
var:=solve(eq,var):
subs(var,[seq(p[i],i=1..N)]):
end:


###############################
# Simu1(x,N): Inputs integers x and N such that 0<=x<=N+1 where x is the location on 
# the discrete line of [0,N+1] where with probability 1/2 you go to x-1 and
# with probability 1/2 you go to N-x, and outputs a list of length two where the first element
# is 0 (loser) or 1 (winner), followed by the number of times it takes to exit the game
Simu1:=proc(x,N) local i,r,x1,P:
x1:=x:
for i from 1 while not (x1=0 or x1=N+1) do
 #we keep updating x1 to either x1-1 or N-x1
 x1:=MyPT([[x1-1,1/2],[N-x1,1/2]]):
od:
# if x1=N+1 then that means the particle reached x=N+1, 
# else if x1=0 then the particle reached x=0
if x1=N+1 then
 return [1,i-1]:
else
 return [0,i-1]:
fi:

end:


# Simu(x,N,K): Inputs integers x,N,K, runs Simu1(x,N) "K" times, and outputs
# the ratio of times where it exited a winner followed by the expected duration
Simu:=proc(x,N,K) local co,L,i,co1:
co:=0:
co1:=0:
for i from 1 to K do
 L:=Simu1(x,N):
 co1:=co1+L[2]:
 if L[1]=1 then
  co:=co+1:
 fi:
od:
evalf([co/K,co1/K]):
end:

###############################
#RMS(N,x,p): with prob. (1-p)/2 goes to x-1, with prob. (1-p)/2 goes to x+1, with prob. p goes to N-x
RMS:=proc(N,x,p) local X,X1:
X := RandomVariable(ProbabilityTable([(1-p)/2,(1-p)/2,p])):

X1:=Sample(X,1):
#X1 returns 1,2, or 3
if round(X1[1])=1 then
  x+1:
elif round(X1[1])=2 then
  x-1:
else
  N-x:
fi:
end:


#SimuMirror1(p,x,N): inputs a prob. p, a location x from 1 to N-1
# and the length of the interval N, and runs it ONE time
# starting at x and going to N-x with prob. p, and
# (1-p)/2 each to x-1 and x+1
SimuMirror1:=proc(p,x,N) local x1,i,r,P:
x1:=x:

for i from 1 while not (x1=0 or x1=N) do
x1:=RMS(N,x1,p):
od:

if x1=N then
 return [1,i-1]:
else
 return [0,i-1]:
fi:
end:

 
#SimuMirror(p,x,N,K): Inputs a probability 0<p<1, and integers x,N,K,
# runs SimuMirror1(p,x,N) "K" times, and outputs
# the ratio of times where it exited a winner followed by the expected duration
SimuMirror:=proc(p,x,N,K)local co,L,i,co1:
co:=0:
co1:=0:
for i from 1 to K do
 L:=SimuMirror1(p,x,N):
 co1:=co1+L[2]:
 if L[1]=1 then
  co:=co+1:
 fi:
od:
evalf([co/K,co1/K]):
end:


###############################
#ProbN2(N,P): Inputs a positive integer N and a probability table P such that
# P=[p1,p2,p3] where p1+p2+p3=1 and outputs a list L of length N such that
# L[x] is the probability of winning in the casino when you start at location x,
# with probability p1 you go to x-1, with probability p2 you to x+1
# and with probability p3 you go to N-x
ProbN2:=proc(N,P) local p,eq,i,j,var:
if not add(j, j in P)=1 then
 return(FAIL):
fi:

var:={seq(p[i],i=0..N)}:
eq:={p[0]=0,p[N]=1}:

for i from 1 to N-1 do
 eq:=eq union {p[i]=P[1]*p[i-1]+P[2]*p[i+1]+P[3]*p[N-i]}:
od:
var:=solve(eq,var):
subs(var,[seq(p[i],i=1..N)]):
end:


#ExpN2(N,P): Inputs a positive integer N and a probability table P where
# P=[p1,p2,p3] and p1+p2+p3=1, and outputs a list L of length N such that
# L[x] is the expected duration in the casino until exiting (either a loser or winner) location x,
# when you start at location x, with probability p1 you go to x-1,
# with probability p2 you to x+1, and with probability p3 you go to N-x
ExpN2:=proc(N,P) local p,eq,i,j,var:
if not add(j, j in P)=1 then
 return(FAIL):
fi:

var:={seq(p[i],i=0..N)}:
eq:={p[0]=0,p[N]=0}:

for i from 1 to N-1 do
 eq:=eq union {p[i]=P[1]*p[i-1]+P[2]*p[i+1]+P[3]*p[N-i]+1}:
od:
var:=solve(eq,var):
subs(var,[seq(p[i],i=1..N)]):
end:



###Checking formulas:
#CheckProbN2(x,p,N): Inputs a positive integer N, an integer x such that 0<x<N`
# and a probability p where 0<=p<=1, checks the conjectured formulas for the limit
# for the probability of starting at x and ending a winner for when
# with probability (1-p)/2 you to x-1, with probability (1-p)/2 you go to x+1,
# and with probability p you go to N-x
CheckProbN2:=proc(p,x,N) local A,B:
if not (p<1 and p>=0) then
 return FAIL:
fi:
A:=(1 + ((-1 - p + 2*sqrt(p))/(-1 + p))^N)*((1 + p + 2*sqrt(p))/(1 - p))^x/(2*((-1 - p - 2*sqrt(p))/(-1 + p))^N - 2*((-1 - p + 2*sqrt(p))/(-1 + p))^N):
B:=(((-1 - p - 2*sqrt(p))/(-1 + p))^N + 1)*((1 + p - 2*sqrt(p))/(1 - p))^x/(-2*((-1 - p - 2*sqrt(p))/(-1 + p))^N + 2*((-1 - p + 2*sqrt(p))/(-1 + p))^N):
return  simplify(A+ B + 1/2):
end:



#CheckExp2(p,x,N): Inputs a positive integer N, an integer x such that 0<x<N,
# and a probability p with 0<=p<1, and checks the conjectured formula of 
# for the expected duration of starting at x, with probability (1-p)/2 you to x-1,
# with probability (1-p)/2 you to x+1, and with probability p you go to N-x
CheckExp2:=proc(x,p,N) local P:
if not (p<1 and p>=0) then
 return FAIL:
fi:
P:=[(1-p)/2,(1-p)/2,p]:
return (1/(1-p)*x*(N-x))-ExpN2(N,P)[x]:
end:




#GR1g(L,n,d): Inputs a list of lists of numbers, and tries to guess a 
# rational equation for the list of lists of numbers of degree d in terms of n
GR1g:=proc(L, n, d) local a, i, P, eq, var, b:
if nops(L) < 2*d + 2 then 
 ERROR(`List too short`):
fi:
P:=add(a[i]*n^i, i=0..d)/add(n^d + b[i]*n^i, i= 0..d-1):
var:={seq(a[i], i=0..d),seq(b[i],i=0..d-1)}:
eq:={seq(numer(L[i][2] - subs(n = L[i][1], P)), i=1 .. 2*d + 2)}:
var:=solve(eq, var):

if var = NULL then
 return(FAIL):
fi:
P:=subs(var, P):
if {seq(L[i][2] - subs(n = L[i][1], P), i=2*d + 3..nops(L))} <> {0} then
 return(FAIL):
fi:
normal(P):
end:
		

#GRg(L,n): Inputs a list of lists of numbers, and runs GR1g(L,n,d)
# which tries to find a rational equation for the list of lists of numbers in terms of n
GRg:=proc(L, n) local d, P:
for d from 1 to 1/2*nops(L) - 2 do 
 P:=GR1g(L, n, d):
 if P <> FAIL then
  return(P):
 fi:
od:
FAIL:
end:

#GP1n(L,n,d): Inputs a list of pairs [input,output]  and a variable n and a non-neg. d outputs the polynomial of degree d
#P(n), such that P(i)=L[i], for all i from 1 to nops(L). OR FAIL
#nops(L)>=d+2
GP1n:=proc(L,n,d) local a,i,P,eq,var:
if nops(L)<d+2 then
 ERROR(`List too short`):
fi:
P:=add(a[i]*n^i,i=0..d):
var:={seq(a[i],i=0..d)}:
eq:={seq(L[i][2]=subs(n=L[i][1],P),i=1..d+2)}:
var:=solve(eq,var):
if var=NULL then
 return(FAIL):
fi:
P:=subs(var,P):
if {seq(L[i][2]-subs(n=L[i][1],P),i=d+3..nops(L))}<>{0} then
 return(FAIL):
fi:
P:
end:


#GPn(L,n): Inputs a list of numbers L and a variable n and outputs the polynomial of degree <=nops(L)-2
#P(n), such that P(i)=L[i], for all i from 1 to nops(L). OR FAIL
#nops(L)>=d+2
GPn:=proc(L,n) local d,P:
for d from 0 to nops(L)-2 do
 P:=GP1n(L,n,d):
 if P<>FAIL then
  return(P):
 fi:
od:
FAIL:
end:



#IdentRat(x): Inputs a number in decimals believed to be rational and guesses it
IdentRat:=proc(x) local L:
Digits:=30:
L:=convert(x,confrac):
end:


#CFtoN(L): inputs a list of the continued fraction of a rational number and outputs the rational number
CFtoN:=proc(L) local L1:
if nops(L)=1 then
 return(L[1]):
fi:

L1:=[op(2..nops(L),L)]:
L[1]+1/CFtoN(L1):
end:



#Lk(p,x,N): Inputs a probability p, 0<p<1, and integers x and N such that
# 0<k<N, and outputs the exact probability of ending at N when you start
# at location x where with probability (1-p)/2 you go to x-1, with probability
# (1-p)/2 you go to x+1 and with probability p you go to N-x
Lk:=proc(p,x,N):
 evalf(ProbN2(N,[(1-p)/2,(1-p)/2,p])[x]):
end:

#Lk1(p,k,N): Inputs a probability p, 0<p<1, and integers k and N such that
# 0<x<N, and outputs the exact probability of ending at N when you start
# at location k where with probability (1-p)/2 you go to k-1, with probability
# (1-p)/2 you go to k+1 and with probability p you go to N-k
Lk1:=proc(p,k,N):
 evalf(ProbN2(N,[(1-p)/2,p,(1-p)/2])[k]):
end:


#AkOld(p,k): The old version of Ak(p,k). 
# Inputs a probability p, 0<p<1, and an integer k, and outputs
# the conjectured probability limit of ending at N when you start at location k
# as N goes to infinity where with probability (1-p)/2 you go to k-1,
# with probability (1-p)/2 you go to k+1 and with probability p you go to N-k
AkOld:=proc(p,k) local LM,i,n:
if k mod 2=1 then
 LM:= add(binomial(k,2*i)*n^(k-2*i),i=0..trunc((k-1)/2)) /(n+1)^k:
else
 LM:= add(binomial(k,1+2*i)*n^(k-2*i-1),i=0..trunc((k-1)/2)) /(n+1)^k:
fi:
evalf(subs(n=sqrt(p),LM)):
end:



#Ak(p,k): The simplified form of AkOld(p,k)
Ak:=proc(p, k) :
return 1/2 - 1/2*((1 - sqrt(p))/(1 + sqrt(p)))^k:
end:



